#!/bin/bash

bold=$(tput bold)
reset=$(tput sgr0)

usage="Usage:\n
\t ./configure [-h|--help] [-i|--interactive] [-m|--with-mpi[=]<value>] [-H|--with-phdf5[=]<value>] [-c|--with-pnetcdf[=]<value>] [-a|--with-adios[=]<value>]\n
\n
-h, --help              \t\t\t print this help\n
-i, --interactive         \t\t to activate the interactive interface of BRIO\n
-m, --with-mpi=<MPIDIR>     \t to specify MPI library directory\n
-H, --with-phdf5=<HDFDIR>   \t to specify Parallel HDF5 library directory\n
-c, --with-pnetcdf=<CDFDIR> \t to specify Parallel NetCDF library directory\n
-a, --with-adios=<ADIDIR>   \t to specify ADIOS library directory
"

INTERACTIVE=0
# Get optional arguments from command line
while getopts ":him:H:c:a:-:" opt; do
    case $opt in
	h)
	    echo -e $usage
	    exit 1
	    ;;
	i)
	    INTERACTIVE=1
	    ;;
	m)
	    MPI=${OPTARG}
	    ;;
	H)
	    HDF=${OPTARG}
	    ;;
	c)
	    CDF=${OPTARG}
	    ;;
	a)
	    ADI=${OPTARG}
	    ;;
	-)
	    case "${OPTARG}" in
		help)
		    echo -e $usage
		    exit 1
		    ;;
		interactive)
		    INTERACTIVE=1
		    ;;
		with-mpi=*)
		    MPI=${OPTARG#*=}
		    # opt=${OPTARG%=$val}
		    ;;
		with-mpi)
		    MPI=${!OPTIND}
		    OPTIND=$(( $OPTIND + 1 ))
		    ;;
		with-phdf5=*)
		    HDF=${OPTARG#*=}
		    ;;
		with-phdf5)
		    HDF=${!OPTIND}
		    OPTIND=$(( $OPTIND + 1 ))
		    ;;
		with-pnetcdf=*)
		    CDF=${OPTARG#*=}
		    ;;
		with-pnetcdf)
		    CDF=${!OPTIND}
		    OPTIND=$(( $OPTIND + 1 ))
		    ;;
		with-adios=*)
		    ADI=${OPTARG#*=}
		    ;;
		with-adios)
		    ADI=${!OPTIND}
		    OPTIND=$(( $OPTIND + 1 ))
		    ;;
		*)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
	    esac;;
	*)
            if [ "$OPTERR" = 1 ] || [ "${optspec:0:1}" != ":" ]; then
                echo "${bold}Unknown option${reset} -${OPTARG}" >&2
            fi
            ;;
    esac
done

# Retrieve libraries path and set variables for the Makefile
POSIX=1; POTOK=1; PNCDF=0; PHDF5=0; ADIOS=0; MPIIO=1
echo "     ${bold}Running configure script for BRIO benchmark${reset}"
echo " "
echo "Preparing compilation with: "
BGCOMPILER=$(which mpixlf90_r)
if [ -z $BGCOMPILER ]; then
    if [ -z $MPI ]; then
	MPIDIR=$(which mpif90)
	if [ -z $MPIDIR ]; then
	    echo "${bold}ERROR${reset}: MPI not found; exiting..."
	    exit 1
	else
	    MPIDIR=${MPIDIR%/*/*}
	fi
    else
	MPIDIR=$MPI
    fi
    echo "> ${bold}MPI library located at${reset}: "$MPIDIR
else
    echo "> ${bold}IBM MPI library${reset}"
    MPIDIR=
fi
if [ -z $HDF ]; then
    HDFDIR=$(which h5dump)
    if [ -z $HDFDIR ]; then
	echo "> ${bold}without parallel HDF5 library${reset}"
    else
	HDFDIR=${HDFDIR%/*/*}
	PHDF5=1
    fi
else
    HDFDIR=$HDF
    PHDF5=1
fi
if [ $PHDF5 -eq 1 ]; then
    echo "> ${bold}parallel HDF5 library located at${reset}: "$HDFDIR
fi
if [ -z $CDF ]; then
    CDFDIR=$(which ncmpidump)
    if [ -z $CDFDIR ]; then
	echo "> ${bold}without parallel NetCDF library${reset}"
    else
	CDFDIR=${CDFDIR%/*/*}
	PNCDF=1
    fi
else
    CDFDIR=$CDF
    PNCDF=1
fi
if [ $PNCDF -eq 1 ]; then
    echo "> ${bold}parallel NetCDF library located at${reset}: "$CDFDIR
fi
if [ -z $ADI ]; then
    ADIDIR=$(which adios_config)
    if [ -z $ADIDIR ]; then
	echo "> ${bold}without ADIOS library${reset}"
    else
	ADIDIR=${ADIDIR%/*/*}
	ADIOS=1
    fi
else
    ADIDIR=$ADI
    ADIOS=1
fi
if [ $ADIOS -eq 1 ]; then
    echo "> ${bold}ADIOS library located at${reset}: "$CDFDIR
fi
if [ $INTERACTIVE -eq 1 ]; then
    echo "> ${bold}an interactive interface${reset}"
else
    echo "> ${bold}the namelist interface${reset}"
fi

# Check the compiler version to set the proper flags
FCCOMPILER=($(mpif90 -show | tr ' ' ' '))
FCCOMPILER=${FCCOMPILER[0]}
if [ -z $BGCOMPILER ]; then
    if [ $FCCOMPILER = "gfortran" ]; then
	FFLAGS="-O3 -fbacktrace -g -ffree-line-length-0"
	CPPFLAGS="-x f95-cpp-input"
	MODFLAGS="-J\$(BINDIR)"
    fi
    if [ $FCCOMPILER = "ifort" ]; then
	FFLAGS="-O3 -traceback -g"
	CPPFLAGS="-fpp"
	MODFLAGS="-module \$(BINDIR)"
    fi
    if [[ $FCCOMPILER = "pfg90" || $FCCOMPILER = "pgfortran" ]]; then
	FFLAGS="-mp -03 -traceback -g"
	CPPFLAGS="-Mpreprocess"
	MODFLAGS="-module \$(BINDIR)"
    fi
    CPPFLAGS=$CPPFLAGS" -DINTERACTIVE=\$(INTERACTIVE) -DPOSIX=\$(POSIX) -DPOTOK=\$(POTOK) -DPNCDF=\$(PNCDF) -DPHDF5=\$(PHDF5) -DADIOS=\$(ADIOS) -DMPIIO=\$(MPIIO)"
else
    echo "> ${bold}Compilation on BlueGene${reset}"
    FCCOMPILER=mpixlf90_r
    FFLAGS="-qnullterm -O3 -g"
    CPPFLAGS="-qsuffix=cpp=f90"
    MODFLAGS="-qmoddir \$(BINDIR)"
    PHYFLAGS="-WF,-DINTERACTIVE=\$(INTERACTIVE),-DPOSIX=\$(POSIX),-DPOTOK=\$(POTOK),-DPNCDF=\$(PNCDF),-DPHDF5=\$(PHDF5),-DADIOS=\$(ADIOS),-DMPIIO=\$(MPIIO),-DBLUEGENE=1"
    KNOWNFC=1
fi

# Write the Makefile
cat > Makefile <<EOF
#===============================================================================
# This Makefile was automatically generated by ./configure
#===============================================================================
# Echo variables for fancy outputs
#===============================================================================
bold  = \$(shell tput bold)
reset = \$(shell tput sgr0)

# Preprocessor variables
#===============================================================================
INTERACTIVE=${INTERACTIVE}
POSIX = ${POSIX}
POTOK = ${POTOK}
PNCDF = ${PNCDF}
PHDF5 = ${PHDF5}
ADIOS = ${ADIOS}
MPIIO = ${MPIIO}

# Compiler and flags
#===============================================================================
F90       = mpif90
FFLAGS    = ${FFLAGS}
CPPFLAGS  = ${CPPFLAGS} 
MODFLAGS  = ${MODFLAGS}
HDFINC    = -I${HDFDIR}/include/
HDFLIB    = -L${HDFDIR}/lib -lhdf5_fortran -lhdf5 -lz
CDFINC    = -I${CDFDIR}/include/
CDFLIB    = -L${CDFDIR}/lib -lpnetcdf
ifeq (\$(ADIOS),1)
ADIOSDIR  = ${ADIDIR}
ADIOSINC  = \$(shell \${ADIOSDIR}/bin/adios_config -c -f)
ADIOSLIB  = \$(shell \${ADIOSDIR}/bin/adios_config -l -f)
endif
LIBFLAGS  = \$(HDFINC) \$(CDFINC) \$(ADIOSINC) \$(MPIINC)
FLAGS     = \$(FFLAGS) \$(PHYFLAGS)
ALLFLAGS  = \$(LIBFLAGS) \$(CPPFLAGS) \$(FLAGS)
MAINFLAGS = \$(ALLFLAGS) -I\$(BINDIR) 
ALLLIBS   = \$(HDFLIB) \$(CDFLIB) \$(MPILIB) \$(ADIOSLIB)

# Sources, modules and binaries directories
#===============================================================================
SRCDIR   = src
MODDIR   = \$(SRCDIR)/modules
BINDIR   = bin
BINDIRSC = ../\$(BINDIR)
BINDIRMD = ../../\$(BINDIR)
VPATH    = \$(SRCDIR):\$(MODDIR)
MODSRC   = \$(wildcard \$(MODDIR)/*f90)
MODOBJ   = \$(join \$(addsuffix \$(BINDIRMD)/, \$(dir \$(MODSRC))), \$(notdir \$(MODSRC:.f90=.o)))
MAINSRC  = \$(wildcard \$(SRCDIR)/*f90)
MAINOBJ  = \$(join \$(addsuffix \$(BINDIRSC)/, \$(dir \$(MAINSRC))), \$(notdir \$(MAINSRC:.f90=.o)))
ALLOBJ   = \$(MODOBJ) \$(MAINOBJ)

#============================================================================
all: BRIO
$(echo -e "\t")@echo "======================== \$(bold)BRIO\$(reset) =========================="
$(echo -e "\t")@echo "============= Benchmark for parallel I/O ==============="
$(echo -e "\t")@echo "========================================================"
$(echo -e "\t")@echo "With: "
ifeq (\$(POSIX),1)
$(echo -e "\t")@echo " - \$(bold)Sequential POSIX I/O\$(reset)"
endif
ifeq (\$(POTOK),1)
$(echo -e "\t")@echo " - \$(bold)Sequential POSIX I/O with token management\$(reset)"
endif
ifeq (\$(PNCDF),1)
$(echo -e "\t")@echo " - \$(bold)Parallel NetCDF I/O\$(reset)"
endif
ifeq (\$(PHDF5),1)
$(echo -e "\t")@echo " - \$(bold)Parallel HDF5 I/O\$(reset)"
endif
ifeq (\$(ADIOS),1)
$(echo -e "\t")@echo " - \$(bold)Adaptive I/O System\$(reset)"
endif
ifeq (\$(MPIIO),1)
$(echo -e "\t")@echo " - \$(bold)MPI-IO\$(reset)"
endif
$(echo -e "\t")@echo "========================================================"
$(echo -e "\t")@echo " > \$(bold)compilation successful!\$(reset)"
#== Modules ==================================================================
\$(MODDIR)/\$(BINDIRMD)/%.o: %.f90
$(echo -e "\t")@echo "> \$(bold)Compiling modules\$(reset): "\$@
$(echo -e "\t")\$(F90) \$(ALLFLAGS) -c \$^ -o \$@ \$(MODFLAGS)
#== Main sources ===============================================================
\$(SRCDIR)/\$(BINDIRSC)/%.o: %.f90
$(echo -e "\t")@echo "> \$(bold)Compiling main sources...\$(reset)"
$(echo -e "\t")\$(F90) \$(MAINFLAGS) -c $^ -o \$@
#============================================================================
BRIO: adios \$(ALLOBJ)
$(echo -e "\t")@echo " > \$(bold)Compiling BRIO...\$(reset)"
$(echo -e "\t")\$(F90) \$(FLAGS) -o ./bin/BRIO \$(ALLOBJ) \$(ALLLIBS)
#============================================================================
ifeq (\$(ADIOS),1)
adios:
$(echo -e "\t")@echo " > \$(bold)Generating *.fh files...\$(reset)"
$(echo -e "\t")gpp.py input/adios_BRIO.xml
$(echo -e "\t")mv *fh \$(MODDIR)
else
adios:
endif
#============================================================================
clean:
$(echo -e "\t")@echo " > \$(bold)Cleaning sources and binaries directories...\$(reset)"
$(echo -e "\t")rm -rf \$(BINDIR)/*.o \$(BINDIR)/*.mod \$(MODDIR)/*.fh input/*.h5 input/*.nc input/*.bp input/*.mp input/sequentialio/

EOF
